"""
CS-433 : Machine Learning
Project 2 -- Recommender Systems

Team :
* Dylan Bourgeois
* Antoine Mougeot
* Philippe Verbist

---

run.py : main interface.

Here you should call one of the available or custom pipelines.
"""

import pipeline
import argparse

parser = argparse.ArgumentParser(description='Description of your program')
parser.add_argument('-t','--train', dest='mode', action='store_const', help='Run training.', const='train')
parser.add_argument('-p','--predict', dest='mode', action='store_const', help='Run the submission.', const='setup')

def get_mode(args):
    """
    Parses input arguments for module running mode.

    Available modes:
        train   : runs the training procedure on the selected model
        predict : runs the prediction with a given model. If no model is \
                  specified it will run with the model generated by train.

    Args:
        args: Parsed CLI arguments.

    Returns:
        train (bool): Is training activated
        predict (bool): Is prediction activated
        p (str): path to model if only predict is activated
    """
    train   = args['mode']=='train'
    predict = args['mode']=='setup'

    p = None
    if predict is True and train is False:
        p = '../res/model/best'
        if p is None:
            raise ValueError("No path to the model was specified.")
    if (train^predict) is False:
        train=True; predict=True;

    return train, predict, p

if __name__ == '__main__':
    args = vars(parser.parse_args())
    train, predict, path = get_mode(args)

    pipeline.deep_net_pipeline(train=train, predict=predict, p=path)
    # pipeline.dense_net_pipeline(  train=train, predict=predict, p=path)
    # pipeline.shallow_net_pipeline(train=train, predict=predict, p=path)
    # pipeline.embedding_pipeline(suffix='128')
